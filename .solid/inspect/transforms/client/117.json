{
  "id": "/workspaces/Velocity/src/components/internal/preferences/inputs/Keybind.tsx",
  "deps": [],
  "plugins": [
    "vite:load-fallback",
    "solid"
  ],
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import type { JSX } from \"solid-js\";\nimport type Keybind from \"~/API/Keybind\";\n\ninterface KeybindProps {\n  value: Keybind;\n}\n\nexport default function KeybindInput(props: KeybindProps): JSX.Element {\n  return (\n    <div class=\"flex items-center gap-2\">\n      <input\n        value={props.value.toString()}\n        type=\"text\"\n        class=\"bg-[#2A2A32] rounded py-[7px] px-[15px]\"\n        onKeyDown={(event) => {\n          event.preventDefault();\n          event.stopImmediatePropagation();\n\n          if (\n            !(event.target instanceof HTMLInputElement) ||\n            /^(control|alt|shift|meta)$/i.test(event.key)\n          )\n            return;\n\n          const options = {\n            id: props.value.id,\n            name: props.value.name,\n            description: props.value.description,\n            key: event.key,\n            ctrl: event.ctrlKey,\n            shift: event.shiftKey,\n            alt: event.altKey,\n            meta: event.metaKey,\n            callback: props.value.callback\n          };\n\n          const keybind = new window.parent.Velocity.Keybind(options);\n\n          event.target.value = keybind.toString();\n        }}\n      ></input>\n      <label class=\"font-light\">{props.value.description}</label>\n    </div>\n  );\n}\n",
      "start": 1681131425381,
      "end": 1681131425932
    },
    {
      "name": "solid",
      "result": "import { template as _$template } from \"solid-js/web\";\nimport { delegateEvents as _$delegateEvents } from \"solid-js/web\";\nimport { insert as _$insert } from \"solid-js/web\";\nimport { effect as _$effect } from \"solid-js/web\";\nconst _tmpl$ = /*#__PURE__*/_$template(`<div class=\"flex items-center gap-2\"><input type=\"text\" class=\"bg-[#2A2A32] rounded py-[7px] px-[15px]\"><label class=\"font-light\"></label></div>`, 5);\nexport default function KeybindInput(props) {\n  return (() => {\n    const _el$ = _tmpl$.cloneNode(true),\n      _el$2 = _el$.firstChild,\n      _el$3 = _el$2.nextSibling;\n    _el$2.$$keydown = event => {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      if (!(event.target instanceof HTMLInputElement) || /^(control|alt|shift|meta)$/i.test(event.key)) return;\n      const options = {\n        id: props.value.id,\n        name: props.value.name,\n        description: props.value.description,\n        key: event.key,\n        ctrl: event.ctrlKey,\n        shift: event.shiftKey,\n        alt: event.altKey,\n        meta: event.metaKey,\n        callback: props.value.callback\n      };\n      const keybind = new window.parent.Velocity.Keybind(options);\n      event.target.value = keybind.toString();\n    };\n    _$insert(_el$3, () => props.value.description);\n    _$effect(() => _el$2.value = props.value.toString());\n    return _el$;\n  })();\n}\n_$delegateEvents([\"keydown\"]);",
      "start": 1681131425932,
      "end": 1681131425942
    }
  ],
  "virtual": false
}