{
  "id": "/workspaces/Velocity/src/components/ContextMenu/index.tsx",
  "deps": [],
  "plugins": [
    "vite:load-fallback",
    "solid"
  ],
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import Button from \"./Button\";\nimport { For, createSignal, onMount } from \"solid-js\";\nimport type { JSX } from \"solid-js\";\nimport type ContextItem from \"~/API/ContextItem\";\n\nconst [clientX, setClientX] = createSignal(0);\nconst [clientY, setClientY] = createSignal(0);\nconst [x, setX] = createSignal(0);\nconst [y, setY] = createSignal(0);\nconst [visible, setVisible] = createSignal(false);\nconst [buttons, setButtons] = createSignal<ContextItem[]>([]);\n\nexport function bindIFrameMousemove(scope: HTMLIFrameElement | Window) {\n  const scopeWindow =\n    scope instanceof HTMLIFrameElement\n      ? (scope.contentWindow as Window)\n      : scope;\n\n  if (!scopeWindow) return;\n\n  scopeWindow.addEventListener(\"visibilitychange\", () => {\n    setVisible(false);\n  });\n\n  scopeWindow.addEventListener(\"mousemove\", (event) => {\n    let offsetX = 0;\n    let offsetY = 0;\n\n    if (scope instanceof HTMLIFrameElement) {\n      const clRect = scope.getBoundingClientRect();\n      offsetX = clRect.left;\n      offsetY = clRect.top;\n    }\n\n    setClientX(event.clientX + offsetX);\n    setClientY(event.clientY + offsetY);\n  });\n\n  scopeWindow.addEventListener(\n    \"contextmenu\",\n    (event: MouseEvent & { data?: ContextItem[] }) => {\n      event.preventDefault();\n      if (event.data) {\n        setVisible(true);\n        setButtons(event.data);\n        let width =\n          document.querySelector<HTMLDivElement>(\"#context-menu\")?.offsetWidth;\n        let height =\n          document.querySelector<HTMLDivElement>(\"#context-menu\")?.offsetHeight;\n        let x = clientX();\n        let y = clientY();\n        if (width && x > window.innerWidth - width) x -= width;\n        if (height && y > window.innerHeight - height) y -= height;\n        setX(x);\n        setY(y);\n      } else {\n        setVisible(false);\n      }\n    }\n  );\n\n  scopeWindow.addEventListener(\"click\", () => {\n    setVisible(false);\n  });\n\n  scopeWindow.addEventListener(\"keydown\", (event) => {\n    setVisible(false);\n  });\n}\n\nexport default function ContextMenu(): JSX.Element {\n  onMount(() => {\n    bindIFrameMousemove(window);\n  });\n\n  function cancelEvent(event: Event) {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  return (\n    <div\n      id=\"context-menu\"\n      class={`fixed ${\n        visible() ? \"display\" : \"hidden\"\n      } w-48 bg-[#2B2A33] shadow-lg rounded border border-[#b5b5b5] py-1`}\n      style={`left: ${x()}px; top: ${y()}px;`}\n      onContextMenu={cancelEvent}\n      onClick={cancelEvent}\n    >\n      <For each={buttons()}>\n        {(button: ContextItem): JSX.Element => {\n          if (button.separator) {\n            return <hr class=\"border-[#b5b5b5] my-1\" />;\n          } else {\n            return (\n              <Button\n                text={button.text as string}\n                onClick={() => {\n                  setVisible(false);\n                  button.onClick!();\n                }}\n              />\n            );\n          }\n        }}\n      </For>\n    </div>\n  );\n}\n",
      "start": 1681131423652,
      "end": 1681131424052
    },
    {
      "name": "solid",
      "result": "import { template as _$template } from \"solid-js/web\";\nimport { delegateEvents as _$delegateEvents } from \"solid-js/web\";\nimport { style as _$style } from \"solid-js/web\";\nimport { className as _$className } from \"solid-js/web\";\nimport { effect as _$effect } from \"solid-js/web\";\nimport { insert as _$insert } from \"solid-js/web\";\nimport { createComponent as _$createComponent } from \"solid-js/web\";\nconst _tmpl$ = /*#__PURE__*/_$template(`<div id=\"context-menu\"></div>`, 2),\n  _tmpl$2 = /*#__PURE__*/_$template(`<hr class=\"border-[#b5b5b5] my-1\">`, 1);\nimport Button from \"./Button\";\nimport { For, createSignal, onMount } from \"solid-js\";\nconst [clientX, setClientX] = createSignal(0);\nconst [clientY, setClientY] = createSignal(0);\nconst [x, setX] = createSignal(0);\nconst [y, setY] = createSignal(0);\nconst [visible, setVisible] = createSignal(false);\nconst [buttons, setButtons] = createSignal([]);\nexport function bindIFrameMousemove(scope) {\n  const scopeWindow = scope instanceof HTMLIFrameElement ? scope.contentWindow : scope;\n  if (!scopeWindow) return;\n  scopeWindow.addEventListener(\"visibilitychange\", () => {\n    setVisible(false);\n  });\n  scopeWindow.addEventListener(\"mousemove\", event => {\n    let offsetX = 0;\n    let offsetY = 0;\n    if (scope instanceof HTMLIFrameElement) {\n      const clRect = scope.getBoundingClientRect();\n      offsetX = clRect.left;\n      offsetY = clRect.top;\n    }\n    setClientX(event.clientX + offsetX);\n    setClientY(event.clientY + offsetY);\n  });\n  scopeWindow.addEventListener(\"contextmenu\", event => {\n    event.preventDefault();\n    if (event.data) {\n      setVisible(true);\n      setButtons(event.data);\n      let width = document.querySelector(\"#context-menu\")?.offsetWidth;\n      let height = document.querySelector(\"#context-menu\")?.offsetHeight;\n      let x = clientX();\n      let y = clientY();\n      if (width && x > window.innerWidth - width) x -= width;\n      if (height && y > window.innerHeight - height) y -= height;\n      setX(x);\n      setY(y);\n    } else {\n      setVisible(false);\n    }\n  });\n  scopeWindow.addEventListener(\"click\", () => {\n    setVisible(false);\n  });\n  scopeWindow.addEventListener(\"keydown\", event => {\n    setVisible(false);\n  });\n}\nexport default function ContextMenu() {\n  onMount(() => {\n    bindIFrameMousemove(window);\n  });\n  function cancelEvent(event) {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n  return (() => {\n    const _el$ = _tmpl$.cloneNode(true);\n    _el$.$$click = cancelEvent;\n    _el$.$$contextmenu = cancelEvent;\n    _$insert(_el$, _$createComponent(For, {\n      get each() {\n        return buttons();\n      },\n      children: button => {\n        if (button.separator) {\n          return _tmpl$2.cloneNode(true);\n        } else {\n          return _$createComponent(Button, {\n            get text() {\n              return button.text;\n            },\n            onClick: () => {\n              setVisible(false);\n              button.onClick();\n            }\n          });\n        }\n      }\n    }));\n    _$effect(_p$ => {\n      const _v$ = `fixed ${visible() ? \"display\" : \"hidden\"} w-48 bg-[#2B2A33] shadow-lg rounded border border-[#b5b5b5] py-1`,\n        _v$2 = `left: ${x()}px; top: ${y()}px;`;\n      _v$ !== _p$._v$ && _$className(_el$, _p$._v$ = _v$);\n      _p$._v$2 = _$style(_el$, _v$2, _p$._v$2);\n      return _p$;\n    }, {\n      _v$: undefined,\n      _v$2: undefined\n    });\n    return _el$;\n  })();\n}\n_$delegateEvents([\"contextmenu\", \"click\"]);",
      "start": 1681131424052,
      "end": 1681131424070
    }
  ],
  "virtual": false
}