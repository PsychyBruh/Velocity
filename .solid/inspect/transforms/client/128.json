{
  "id": "/workspaces/Velocity/src/manager/tabManager.ts",
  "deps": [],
  "plugins": [
    "vite:load-fallback",
    "vite:esbuild"
  ],
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { registerTab } from \"./runtimeManager\";\nimport type ContextItem from \"~/API/ContextItem\";\nimport Tab from \"~/API/Tab\";\nimport { bindIFrameMousemove } from \"~/components/ContextMenu\";\nimport handleClick from \"~/manager/clickManager\";\nimport generateContextButtons from \"~/manager/contextManager\";\nimport keybind from \"~/manager/keybindManager\";\nimport xenosPostManifest from \"~/manager/xenosManager\";\nimport * as urlUtil from \"~/util/url\";\n\nexport function register(tab: Tab): void {\n  registerEvents(tab);\n  registerTab(tab);\n}\n\nfunction registerEvents(tab: Tab): void {\n  tab.iframe.contentWindow?.addEventListener(\"keydown\", keybind);\n  tab.iframe.contentWindow?.addEventListener(\"click\", handleClick);\n  (tab.iframe.contentWindow || ({} as { open: any })).open = (url: string) => {\n    const tab = new Tab(url, true);\n    return tab.iframe.contentWindow;\n  };\n  (tab.iframe.contentWindow || ({} as { close: any })).close = () => {\n    tab.close();\n  };\n  tab.iframe.contentWindow?.addEventListener(\"unload\", () => {\n    setTimeout(() => {\n      registerEvents(tab);\n      tab.updateStorage();\n      tab.emit(\"document_start\", normalizeURL(tab.url()));\n    });\n    tab.loading = true;\n  });\n  tab.iframe.contentWindow?.addEventListener(\"wheel\", () => {\n    setTimeout(() => {\n      tab.scrollPos =\n        tab.iframe.contentDocument?.documentElement.scrollTop || 0;\n    });\n  });\n  tab.iframe.contentWindow?.addEventListener(\n    \"contextmenu\",\n    (event: Event & { data?: ContextItem[] }) => {\n      if (event.target)\n        event.data = generateContextButtons(event.target as HTMLElement);\n    }\n  );\n  tab.iframe.contentWindow?.addEventListener(\"DOMContentLoaded\", () => {\n    injectabtory(tab);\n    tab.emit(\"document_end\", normalizeURL(tab.url()));\n  });\n  tab.iframe.contentWindow?.addEventListener(\"load\", async () => {\n    tab.setDevTools(false);\n    tab.emit(\"document_idle\", normalizeURL(tab.url()));\n    if (\"Velocity\" in window) {\n      const history = await window.Velocity.history.get();\n      if (\n        !history.find((x) => {\n          const id = x.id === tab.historyId;\n          const url = urlUtil.areEqual(x.url, tab.url());\n          return id && url;\n        })\n      )\n        tab.historyId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n      window.Velocity.history.add(tab);\n    }\n    if (\"xen\" in window) {\n      const manifest =\n        tab.iframe.contentDocument?.querySelector<HTMLLinkElement>(\n          \"link[rel='manifest']\"\n        )?.href;\n      if (manifest) {\n        xenosPostManifest(manifest, tab.url());\n      }\n    }\n  });\n\n  (tab.iframe.contentWindow || ({} as { open: any })).open = (url: string) => {\n    const tab = new Tab(url, true);\n    return tab.iframe.contentWindow;\n  };\n  (tab.iframe.contentWindow || ({} as { close: any })).close = () => {\n    tab.close();\n  };\n\n  bindIFrameMousemove(tab.iframe);\n}\n\nfunction injectabtory(tab: Tab): void {\n  if (tab.iframe.contentWindow) {\n    tab.iframe.contentWindow.history.pushState = new Proxy(\n      tab.iframe.contentWindow.history.pushState,\n      {\n        apply(target, tabArg, argArray) {\n          setTimeout(() => {\n            tab.historyId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n            window.Velocity.history.add(tab);\n          });\n          return Reflect.apply(target, tabArg, argArray);\n        }\n      }\n    );\n    tab.iframe.contentWindow.history.replaceState = new Proxy(\n      tab.iframe.contentWindow.history.replaceState,\n      {\n        apply(target, tabArg, argArray) {\n          setTimeout(() => {\n            window.Velocity.history.add(tab);\n          });\n          return Reflect.apply(target, tabArg, argArray);\n        }\n      }\n    );\n  }\n}\n\nfunction normalizeURL(url: string): string {\n  try {\n    return new URL(url).toString();\n  } catch {\n    return url;\n  }\n}\n",
      "start": 1681131426027,
      "end": 1681131426628
    },
    {
      "name": "vite:esbuild",
      "result": "import { registerTab } from \"./runtimeManager\";\nimport Tab from \"~/API/Tab\";\nimport { bindIFrameMousemove } from \"~/components/ContextMenu\";\nimport handleClick from \"~/manager/clickManager\";\nimport generateContextButtons from \"~/manager/contextManager\";\nimport keybind from \"~/manager/keybindManager\";\nimport xenosPostManifest from \"~/manager/xenosManager\";\nimport * as urlUtil from \"~/util/url\";\nexport function register(tab) {\n  registerEvents(tab);\n  registerTab(tab);\n}\nfunction registerEvents(tab) {\n  tab.iframe.contentWindow?.addEventListener(\"keydown\", keybind);\n  tab.iframe.contentWindow?.addEventListener(\"click\", handleClick);\n  (tab.iframe.contentWindow || {}).open = (url) => {\n    const tab2 = new Tab(url, true);\n    return tab2.iframe.contentWindow;\n  };\n  (tab.iframe.contentWindow || {}).close = () => {\n    tab.close();\n  };\n  tab.iframe.contentWindow?.addEventListener(\"unload\", () => {\n    setTimeout(() => {\n      registerEvents(tab);\n      tab.updateStorage();\n      tab.emit(\"document_start\", normalizeURL(tab.url()));\n    });\n    tab.loading = true;\n  });\n  tab.iframe.contentWindow?.addEventListener(\"wheel\", () => {\n    setTimeout(() => {\n      tab.scrollPos = tab.iframe.contentDocument?.documentElement.scrollTop || 0;\n    });\n  });\n  tab.iframe.contentWindow?.addEventListener(\n    \"contextmenu\",\n    (event) => {\n      if (event.target)\n        event.data = generateContextButtons(event.target);\n    }\n  );\n  tab.iframe.contentWindow?.addEventListener(\"DOMContentLoaded\", () => {\n    injectabtory(tab);\n    tab.emit(\"document_end\", normalizeURL(tab.url()));\n  });\n  tab.iframe.contentWindow?.addEventListener(\"load\", async () => {\n    tab.setDevTools(false);\n    tab.emit(\"document_idle\", normalizeURL(tab.url()));\n    if (\"Velocity\" in window) {\n      const history = await window.Velocity.history.get();\n      if (!history.find((x) => {\n        const id = x.id === tab.historyId;\n        const url = urlUtil.areEqual(x.url, tab.url());\n        return id && url;\n      }))\n        tab.historyId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n      window.Velocity.history.add(tab);\n    }\n    if (\"xen\" in window) {\n      const manifest = tab.iframe.contentDocument?.querySelector(\n        \"link[rel='manifest']\"\n      )?.href;\n      if (manifest) {\n        xenosPostManifest(manifest, tab.url());\n      }\n    }\n  });\n  (tab.iframe.contentWindow || {}).open = (url) => {\n    const tab2 = new Tab(url, true);\n    return tab2.iframe.contentWindow;\n  };\n  (tab.iframe.contentWindow || {}).close = () => {\n    tab.close();\n  };\n  bindIFrameMousemove(tab.iframe);\n}\nfunction injectabtory(tab) {\n  if (tab.iframe.contentWindow) {\n    tab.iframe.contentWindow.history.pushState = new Proxy(\n      tab.iframe.contentWindow.history.pushState,\n      {\n        apply(target, tabArg, argArray) {\n          setTimeout(() => {\n            tab.historyId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n            window.Velocity.history.add(tab);\n          });\n          return Reflect.apply(target, tabArg, argArray);\n        }\n      }\n    );\n    tab.iframe.contentWindow.history.replaceState = new Proxy(\n      tab.iframe.contentWindow.history.replaceState,\n      {\n        apply(target, tabArg, argArray) {\n          setTimeout(() => {\n            window.Velocity.history.add(tab);\n          });\n          return Reflect.apply(target, tabArg, argArray);\n        }\n      }\n    );\n  }\n}\nfunction normalizeURL(url) {\n  try {\n    return new URL(url).toString();\n  } catch {\n    return url;\n  }\n}\n",
      "start": 1681131426628,
      "end": 1681131426639
    }
  ],
  "virtual": false
}