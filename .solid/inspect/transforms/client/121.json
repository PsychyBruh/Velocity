{
  "id": "/workspaces/Velocity/src/manager/addonManager.ts",
  "deps": [],
  "plugins": [
    "vite:load-fallback",
    "vite:esbuild"
  ],
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { register } from \"./contentScriptManager\";\nimport type { ContentScript } from \"./contentScriptManager\";\nimport setTheme from \"./themeManager\";\nimport { updateCssVariables, defaultTheme } from \"./themeManager\";\nimport type { IDBPDatabase } from \"idb\";\nimport { openDB } from \"idb\";\nimport Manifest, { ContentScripts, Permissions } from \"webextension-manifest\";\nimport AddonReader from \"~/API/AddonReader\";\nimport { addons, setAddons } from \"~/data/appState\";\nimport type AddonEntry from \"~/types/AddonEntry\";\n\nconst db: IDBPDatabase = await openDB(\"addons\", 1, {\n  upgrade(db) {\n    db.createObjectStore(\"addons\", {\n      keyPath: \"id\"\n    });\n  }\n});\n\nconst tx = db.transaction(\"addons\", \"readwrite\");\nconst store = tx.objectStore(\"addons\");\n\nsetAddons(await store.getAll());\n\naddons().forEach(async (addon) => {\n  await initAddon(addon);\n});\n\nexport async function install(\n  reader: AddonReader,\n  url: string\n): Promise<string> {\n  const manifest = await reader.extractManifest();\n  if (\n    window.confirm(\n      `This site would like to install an add-on in Velocity: \\n ${\n        manifest.short_name ?? manifest.name\n      }`\n    )\n  ) {\n    const addon: AddonEntry = {\n      canUninstall: true,\n      id: (await reader.id) ?? manifest.name,\n      isActive: true,\n      isEnabled: true,\n      name: manifest.name,\n      type: manifest.theme ? \"theme\" : \"extension\",\n      version: manifest.version,\n      description: manifest.description,\n      archive: url\n    };\n\n    if (addon.type === \"theme\") {\n      setAddons(\n        addons().map((x) => {\n          if (x.type === \"theme\") {\n            x.isActive = false;\n            x.isEnabled = false;\n          }\n          return x;\n        })\n      );\n    }\n\n    setAddons([addon, ...addons()]);\n\n    updateDatabase();\n\n    await initAddon(addon, reader, manifest);\n\n    return await reader.id;\n  } else {\n    throw new Error(\"User prevented installation.\");\n  }\n}\n\nexport function uninstall(addon: AddonEntry): Promise<void> {\n  return new Promise(async (resolve, reject) => {\n    if (addon.canUninstall) {\n      if (addon.type === \"theme\") {\n        if (addon.isActive && addon.isEnabled) {\n          localStorage.setItem(\"theme\", \"\");\n          updateCssVariables(defaultTheme);\n        }\n      }\n      setAddons(addons().filter((x) => x.id !== addon.id));\n      await updateDatabase();\n      if (window.confirm(\"Action may require page reload.\")) {\n        location.reload();\n        resolve();\n      } else {\n        console.warn(\n          \"Addon may still be running in the background, in order to ensure the addon is fully uninstalled please reload the tab.\"\n        );\n        resolve();\n      }\n    } else {\n      reject();\n    }\n  });\n}\n\nasync function initAddon(\n  addon: AddonEntry,\n  reader?: AddonReader,\n  manifest?: Manifest\n) {\n  reader = reader ?? new AddonReader(addon.archive);\n  await reader.ready;\n  manifest = manifest ?? (await reader.extractManifest());\n\n  if (addon.type === \"theme\") {\n    if (addon.isActive) setTheme(manifest, reader);\n  } else {\n    if (addon.isEnabled) {\n      if (manifest.content_scripts) {\n        initContentScripts(\n          manifest.content_scripts,\n          manifest.permissions ?? [],\n          reader\n        );\n      }\n    }\n  }\n}\n\nfunction initContentScripts(\n  contentScripts: ContentScripts,\n  permissions: Permissions,\n  reader: AddonReader\n) {\n  contentScripts.forEach(async (contentScript) => {\n    if (contentScript.js)\n      // @ts-ignore\n      contentScript.js = contentScript.js.map(async (script) =>\n        reader.extractFile(script, \"text\")\n      );\n    if (contentScript.css)\n      // @ts-ignore\n      contentScript.css = contentScript.css.map(async (script) =>\n        reader.extractFile(script, \"text\")\n      );\n\n    register(contentScript as ContentScript, permissions ?? []);\n  });\n}\n\nasync function updateDatabase() {\n  const tx = db.transaction(\"addons\", \"readwrite\");\n  const store = tx.objectStore(\"addons\");\n\n  await store.clear();\n  for (const addon of addons()) {\n    await store.put(addon);\n  }\n  return Promise.resolve();\n}\n",
      "start": 1681131425390,
      "end": 1681131425972
    },
    {
      "name": "vite:esbuild",
      "result": "import { register } from \"./contentScriptManager\";\nimport setTheme from \"./themeManager\";\nimport { updateCssVariables, defaultTheme } from \"./themeManager\";\nimport { openDB } from \"idb\";\nimport AddonReader from \"~/API/AddonReader\";\nimport { addons, setAddons } from \"~/data/appState\";\nconst db = await openDB(\"addons\", 1, {\n  upgrade(db2) {\n    db2.createObjectStore(\"addons\", {\n      keyPath: \"id\"\n    });\n  }\n});\nconst tx = db.transaction(\"addons\", \"readwrite\");\nconst store = tx.objectStore(\"addons\");\nsetAddons(await store.getAll());\naddons().forEach(async (addon) => {\n  await initAddon(addon);\n});\nexport async function install(reader, url) {\n  const manifest = await reader.extractManifest();\n  if (window.confirm(\n    `This site would like to install an add-on in Velocity: \n ${manifest.short_name ?? manifest.name}`\n  )) {\n    const addon = {\n      canUninstall: true,\n      id: await reader.id ?? manifest.name,\n      isActive: true,\n      isEnabled: true,\n      name: manifest.name,\n      type: manifest.theme ? \"theme\" : \"extension\",\n      version: manifest.version,\n      description: manifest.description,\n      archive: url\n    };\n    if (addon.type === \"theme\") {\n      setAddons(\n        addons().map((x) => {\n          if (x.type === \"theme\") {\n            x.isActive = false;\n            x.isEnabled = false;\n          }\n          return x;\n        })\n      );\n    }\n    setAddons([addon, ...addons()]);\n    updateDatabase();\n    await initAddon(addon, reader, manifest);\n    return await reader.id;\n  } else {\n    throw new Error(\"User prevented installation.\");\n  }\n}\nexport function uninstall(addon) {\n  return new Promise(async (resolve, reject) => {\n    if (addon.canUninstall) {\n      if (addon.type === \"theme\") {\n        if (addon.isActive && addon.isEnabled) {\n          localStorage.setItem(\"theme\", \"\");\n          updateCssVariables(defaultTheme);\n        }\n      }\n      setAddons(addons().filter((x) => x.id !== addon.id));\n      await updateDatabase();\n      if (window.confirm(\"Action may require page reload.\")) {\n        location.reload();\n        resolve();\n      } else {\n        console.warn(\n          \"Addon may still be running in the background, in order to ensure the addon is fully uninstalled please reload the tab.\"\n        );\n        resolve();\n      }\n    } else {\n      reject();\n    }\n  });\n}\nasync function initAddon(addon, reader, manifest) {\n  reader = reader ?? new AddonReader(addon.archive);\n  await reader.ready;\n  manifest = manifest ?? await reader.extractManifest();\n  if (addon.type === \"theme\") {\n    if (addon.isActive)\n      setTheme(manifest, reader);\n  } else {\n    if (addon.isEnabled) {\n      if (manifest.content_scripts) {\n        initContentScripts(\n          manifest.content_scripts,\n          manifest.permissions ?? [],\n          reader\n        );\n      }\n    }\n  }\n}\nfunction initContentScripts(contentScripts, permissions, reader) {\n  contentScripts.forEach(async (contentScript) => {\n    if (contentScript.js)\n      contentScript.js = contentScript.js.map(\n        async (script) => reader.extractFile(script, \"text\")\n      );\n    if (contentScript.css)\n      contentScript.css = contentScript.css.map(\n        async (script) => reader.extractFile(script, \"text\")\n      );\n    register(contentScript, permissions ?? []);\n  });\n}\nasync function updateDatabase() {\n  const tx2 = db.transaction(\"addons\", \"readwrite\");\n  const store2 = tx2.objectStore(\"addons\");\n  await store2.clear();\n  for (const addon of addons()) {\n    await store2.put(addon);\n  }\n  return Promise.resolve();\n}\n",
      "start": 1681131425972,
      "end": 1681131426002
    }
  ],
  "virtual": false
}