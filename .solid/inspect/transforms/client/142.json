{
  "id": "/workspaces/Velocity/src/util/url.ts",
  "deps": [],
  "plugins": [
    "vite:load-fallback",
    "vite:esbuild"
  ],
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { xor } from \".\";\nimport { engines, preferences } from \"./\";\nimport protocol from \"~/manager/protocolManager\";\n\nexport function normalize(url: string): string {\n  if (!(\"location\" in globalThis)) return url;\n  const reverse = protocol.reverse(url);\n  if (protocol.find(url)) {\n    return url;\n  }\n  if (reverse) {\n    url = reverse;\n  } else if (url.startsWith(location.origin + window.__uv$config.prefix)) {\n    url = url.replace(location.origin + window.__uv$config.prefix, \"\");\n    url = xor.decode(url);\n  }\n  if (url === \"about:newTab\") {\n    url = \"\";\n  }\n\n  return url;\n}\n\nexport function generateProxyUrl(query: string): string {\n  let location: string;\n  if (!window.__uv$config) window.location.reload();\n  if (protocol.find(query) || protocol.reverse(query)) {\n    location = protocol.find(query) || \"/internal/newTab\";\n  } else if (/^https?:\\/\\/([^\\s]+\\.)+[^\\s]+(:[0-65536])?$/.test(query)) {\n    location = window.__uv$config.prefix + window.__uv$config.encodeUrl(query);\n  } else if (/^([^\\s]+\\.)+[^\\s]+(:[0-65536])?$/.test(query)) {\n    /*\n        We use http here because otherwise we will get certifacate issues when trying to\n        connect to http only websites. If a website uses https it should automatically redirect.\n\n        In the future we should look into sniffing for https and using https if the website\n        supports it.\n      */\n    location =\n      window.__uv$config.prefix +\n      window.__uv$config.encodeUrl(\n        \"http\" +\n          (preferences()[\"search.defaults.useHttps\"] ? \"s\" : \"\") +\n          \"://\" +\n          query\n      );\n  } else {\n    location =\n      window.__uv$config.prefix +\n      window.__uv$config.encodeUrl(generateSearchURL(query));\n  }\n  return location;\n}\n\nfunction generateSearchURL(query: string): string {\n  return engines[\n    preferences()[\"search.defaults.searchEngine\"] || \"google\"\n  ].searchStr.replace(\"%s\", encodeURIComponent(query));\n}\n\nexport function areEqual(a: string, b: string): boolean {\n  try {\n    const urlA = new URL(a);\n    const urlB = new URL(b);\n    return (\n      urlA.origin === urlB.origin &&\n      urlA.pathname === urlB.pathname &&\n      urlA.search === urlB.search\n    );\n  } catch {\n    return false;\n  }\n}\n",
      "start": 1681131423904,
      "end": 1681131424188
    },
    {
      "name": "vite:esbuild",
      "result": "import { xor } from \".\";\nimport { engines, preferences } from \"./\";\nimport protocol from \"~/manager/protocolManager\";\nexport function normalize(url) {\n  if (!(\"location\" in globalThis))\n    return url;\n  const reverse = protocol.reverse(url);\n  if (protocol.find(url)) {\n    return url;\n  }\n  if (reverse) {\n    url = reverse;\n  } else if (url.startsWith(location.origin + window.__uv$config.prefix)) {\n    url = url.replace(location.origin + window.__uv$config.prefix, \"\");\n    url = xor.decode(url);\n  }\n  if (url === \"about:newTab\") {\n    url = \"\";\n  }\n  return url;\n}\nexport function generateProxyUrl(query) {\n  let location2;\n  if (!window.__uv$config)\n    window.location.reload();\n  if (protocol.find(query) || protocol.reverse(query)) {\n    location2 = protocol.find(query) || \"/internal/newTab\";\n  } else if (/^https?:\\/\\/([^\\s]+\\.)+[^\\s]+(:[0-65536])?$/.test(query)) {\n    location2 = window.__uv$config.prefix + window.__uv$config.encodeUrl(query);\n  } else if (/^([^\\s]+\\.)+[^\\s]+(:[0-65536])?$/.test(query)) {\n    location2 = window.__uv$config.prefix + window.__uv$config.encodeUrl(\n      \"http\" + (preferences()[\"search.defaults.useHttps\"] ? \"s\" : \"\") + \"://\" + query\n    );\n  } else {\n    location2 = window.__uv$config.prefix + window.__uv$config.encodeUrl(generateSearchURL(query));\n  }\n  return location2;\n}\nfunction generateSearchURL(query) {\n  return engines[preferences()[\"search.defaults.searchEngine\"] || \"google\"].searchStr.replace(\"%s\", encodeURIComponent(query));\n}\nexport function areEqual(a, b) {\n  try {\n    const urlA = new URL(a);\n    const urlB = new URL(b);\n    return urlA.origin === urlB.origin && urlA.pathname === urlB.pathname && urlA.search === urlB.search;\n  } catch {\n    return false;\n  }\n}\n",
      "start": 1681131424189,
      "end": 1681131424724
    }
  ],
  "virtual": false
}