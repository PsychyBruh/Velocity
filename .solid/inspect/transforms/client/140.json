{
  "id": "/workspaces/Velocity/src/util/index.ts",
  "deps": [],
  "plugins": [
    "vite:load-fallback",
    "vite:esbuild"
  ],
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import type Tab from \"~/API/Tab\";\nimport { tabStack } from \"~/data/appState\";\nimport type Preferences from \"~/types/Preferences\";\n\nexport function preferences(): Preferences {\n  return localStorage.getItem(\"preferences\")\n    ? JSON.parse(localStorage.getItem(\"preferences\") as string)\n    : ({\n        \"general.startup.openPreviousTabs\": true,\n        \"general.tabs.openWindowLinksInTab\": true,\n        \"general.tabs.switchToMedia\": false,\n        \"general.tabs.confirmBeforeClosing\": true,\n        \"search.defaults.useHttps\": false,\n        \"search.defaults.searchEngine\": \"google\",\n        \"search.defaults.proxy\": \"ultraviolet\",\n        \"bookmarks.shown\": true\n      } as const);\n}\n\nexport const xor = {\n  encode(str: string): string {\n    if (!str) return str;\n    return encodeURIComponent(\n      str\n        .toString()\n        .split(\"\")\n        .map((char, ind) =>\n          ind % 2 ? String.fromCharCode(char.charCodeAt(0) ^ 2) : char\n        )\n        .join(\"\")\n    );\n  },\n  decode(str: string): string {\n    if (!str) return str;\n    let [input, ...search] = str.split(\"?\");\n\n    return (\n      decodeURIComponent(input)\n        .split(\"\")\n        .map((char, ind) =>\n          ind % 2 ? String.fromCharCode(char.charCodeAt(0) ^ 2) : char\n        )\n        .join(\"\") + (search.length ? \"?\" + search.join(\"?\") : \"\")\n    );\n  }\n};\n\nexport const engines = {\n  google: {\n    name: \"Google\",\n    searchStr: \"https://www.google.com/search?q=%s\"\n  },\n  bing: {\n    name: \"Bing\",\n    searchStr: \"https://www.bing.com/search?q=%s\"\n  },\n  duckduckgo: {\n    name: \"DuckDuckGo\",\n    searchStr: \"https://duckduckgo.com/?q=%s\"\n  },\n  brave: {\n    name: \"Brave\",\n    searchStr: \"https://search.brave.com/search?q=%s\"\n  },\n  yahoo: {\n    name: \"Yahoo\",\n    searchStr: \"https://search.yahoo.com/search?p=%s\"\n  }\n};\n\n// https://stackoverflow.com/a/26420284 (with slight modifications)\nexport function patternToRegExp(pattern: string) {\n  if (pattern == \"<all_urls>\") return /^(?:http|https|file|ftp):\\/\\/.*/;\n\n  var split = /^(\\*|http|https|file|ftp):\\/\\/(.*)$/.exec(pattern);\n  if (!split) return /$./;\n  var schema = split[1];\n  var fullpath = split[2];\n\n  var split = /^([^\\/]*)\\/(.*)$/.exec(fullpath);\n  if (!split) return /$./;\n  var host = split[1];\n  var path = split[2];\n\n  // File\n  if (schema == \"file\" && host != \"\") return /$./;\n  if (schema != \"file\" && host == \"\") return /$./;\n  if (!/^(\\*|\\*\\.[^*]+|[^*]*)$/.exec(host)) return /$./;\n\n  var reString = \"^\";\n  reString += schema == \"*\" ? \"https*\" : schema;\n  reString += \":\\\\/\\\\/\";\n  // Not overly concerned with intricacies\n  //   of domain name restrictions and IDN\n  //   as we're not testing domain validity\n  reString += host.replace(/\\*\\.?/, \"[^\\\\/]*\");\n  reString += \"(:\\\\d+)?\";\n  reString += \"\\\\/\";\n  reString += path.replace(\"*\", \".*\");\n  reString += \"$\";\n\n  return RegExp(reString);\n}\n\nexport const ADDON_NORMALIZE_REGEX = /^\\.?\\//;\n\nexport function getActiveTab(): Tab {\n  return Array.from(tabStack())[0];\n}\n",
      "start": 1681131423216,
      "end": 1681131423551
    },
    {
      "name": "vite:esbuild",
      "result": "import { tabStack } from \"~/data/appState\";\nexport function preferences() {\n  return localStorage.getItem(\"preferences\") ? JSON.parse(localStorage.getItem(\"preferences\")) : {\n    \"general.startup.openPreviousTabs\": true,\n    \"general.tabs.openWindowLinksInTab\": true,\n    \"general.tabs.switchToMedia\": false,\n    \"general.tabs.confirmBeforeClosing\": true,\n    \"search.defaults.useHttps\": false,\n    \"search.defaults.searchEngine\": \"google\",\n    \"search.defaults.proxy\": \"ultraviolet\",\n    \"bookmarks.shown\": true\n  };\n}\nexport const xor = {\n  encode(str) {\n    if (!str)\n      return str;\n    return encodeURIComponent(\n      str.toString().split(\"\").map(\n        (char, ind) => ind % 2 ? String.fromCharCode(char.charCodeAt(0) ^ 2) : char\n      ).join(\"\")\n    );\n  },\n  decode(str) {\n    if (!str)\n      return str;\n    let [input, ...search] = str.split(\"?\");\n    return decodeURIComponent(input).split(\"\").map(\n      (char, ind) => ind % 2 ? String.fromCharCode(char.charCodeAt(0) ^ 2) : char\n    ).join(\"\") + (search.length ? \"?\" + search.join(\"?\") : \"\");\n  }\n};\nexport const engines = {\n  google: {\n    name: \"Google\",\n    searchStr: \"https://www.google.com/search?q=%s\"\n  },\n  bing: {\n    name: \"Bing\",\n    searchStr: \"https://www.bing.com/search?q=%s\"\n  },\n  duckduckgo: {\n    name: \"DuckDuckGo\",\n    searchStr: \"https://duckduckgo.com/?q=%s\"\n  },\n  brave: {\n    name: \"Brave\",\n    searchStr: \"https://search.brave.com/search?q=%s\"\n  },\n  yahoo: {\n    name: \"Yahoo\",\n    searchStr: \"https://search.yahoo.com/search?p=%s\"\n  }\n};\nexport function patternToRegExp(pattern) {\n  if (pattern == \"<all_urls>\")\n    return /^(?:http|https|file|ftp):\\/\\/.*/;\n  var split = /^(\\*|http|https|file|ftp):\\/\\/(.*)$/.exec(pattern);\n  if (!split)\n    return /$./;\n  var schema = split[1];\n  var fullpath = split[2];\n  var split = /^([^\\/]*)\\/(.*)$/.exec(fullpath);\n  if (!split)\n    return /$./;\n  var host = split[1];\n  var path = split[2];\n  if (schema == \"file\" && host != \"\")\n    return /$./;\n  if (schema != \"file\" && host == \"\")\n    return /$./;\n  if (!/^(\\*|\\*\\.[^*]+|[^*]*)$/.exec(host))\n    return /$./;\n  var reString = \"^\";\n  reString += schema == \"*\" ? \"https*\" : schema;\n  reString += \":\\\\/\\\\/\";\n  reString += host.replace(/\\*\\.?/, \"[^\\\\/]*\");\n  reString += \"(:\\\\d+)?\";\n  reString += \"\\\\/\";\n  reString += path.replace(\"*\", \".*\");\n  reString += \"$\";\n  return RegExp(reString);\n}\nexport const ADDON_NORMALIZE_REGEX = /^\\.?\\//;\nexport function getActiveTab() {\n  return Array.from(tabStack())[0];\n}\n",
      "start": 1681131423552,
      "end": 1681131423582
    }
  ],
  "virtual": false
}