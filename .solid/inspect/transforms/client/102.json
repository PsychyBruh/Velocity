{
  "id": "/workspaces/Velocity/src/components/Bookmarks.tsx",
  "deps": [],
  "plugins": [
    "vite:load-fallback",
    "solid"
  ],
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import Bookmark from \"./Bookmark\";\nimport ConstrainDragAxis from \"./ConstrainDragAxis\";\nimport {\n  DragDropProvider,\n  DragDropSensors,\n  SortableProvider,\n  closestCenter,\n  createSortable\n} from \"@thisbeyond/solid-dnd\";\nimport { For, Show } from \"solid-js\";\nimport type { JSX } from \"solid-js\";\nimport type BookmarkAPI from \"~/API/Bookmark\";\nimport ContextItem from \"~/API/ContextItem\";\nimport { bookmarks, setBookmarks } from \"~/data/appState\";\nimport { bookmarksShown, setBookmarksShown } from \"~/data/appState\";\n\nexport default function Bookmarks(): JSX.Element {\n  // We have to use any on this because solid-dnd doesn't have proper typings\n  const onDragEnd = ({ draggable, droppable }: any) => {\n    draggable.node.classList.remove(\"z-20\");\n    if (draggable && droppable) {\n      const currentItems = bookmarks();\n      const fromIndex = currentItems.findIndex(\n        (bookmark: BookmarkAPI) => bookmark.id === draggable.id\n      );\n      const toIndex = currentItems.findIndex(\n        (bookmark: BookmarkAPI) => bookmark.id === droppable.id\n      );\n      if (fromIndex !== toIndex) {\n        const updatedItems = currentItems.slice();\n        updatedItems.splice(toIndex, 0, ...updatedItems.splice(fromIndex, 1));\n        setBookmarks(updatedItems);\n      }\n    }\n  };\n\n  // We have to use any on this because solid-dnd doesn't have proper typings\n  const onDragStart = ({ draggable }: any) =>\n    draggable.node.classList.add(\"z-20\");\n\n  return (\n    <Show when={bookmarksShown()}>\n      <div\n        id=\"PersonalToolbar\"\n        class=\"flex items-center h-7 w-full text-[11px] px-2 gap-2\"\n        oncontextmenu={(event: MouseEvent & { data?: ContextItem[] }): void => {\n          if (!event.data) event.data = [];\n          event.data.push(\n            new ContextItem({\n              text: \"Hide bookmarks\",\n              onClick: () => {\n                setBookmarksShown(false);\n              }\n            })\n          );\n        }}\n      >\n        <DragDropProvider\n          onDragEnd={onDragEnd}\n          onDragStart={onDragStart}\n          collisionDetector={closestCenter}\n        >\n          <ConstrainDragAxis />\n          <DragDropSensors />\n          <SortableProvider ids={bookmarks().map((x) => x.id)}>\n            <For each={bookmarks()}>\n              {(bookmark: BookmarkAPI) => {\n                const sortable = createSortable(bookmark.id);\n                return <Bookmark sortable={sortable} bookmark={bookmark} />;\n              }}\n            </For>\n          </SortableProvider>\n        </DragDropProvider>\n      </div>\n    </Show>\n  );\n}\n",
      "start": 1681131423652,
      "end": 1681131424027
    },
    {
      "name": "solid",
      "result": "import { template as _$template } from \"solid-js/web\";\nimport { delegateEvents as _$delegateEvents } from \"solid-js/web\";\nimport { insert as _$insert } from \"solid-js/web\";\nimport { createComponent as _$createComponent } from \"solid-js/web\";\nconst _tmpl$ = /*#__PURE__*/_$template(`<div id=\"PersonalToolbar\" class=\"flex items-center h-7 w-full text-[11px] px-2 gap-2\"></div>`, 2);\nimport Bookmark from \"./Bookmark\";\nimport ConstrainDragAxis from \"./ConstrainDragAxis\";\nimport { DragDropProvider, DragDropSensors, SortableProvider, closestCenter, createSortable } from \"@thisbeyond/solid-dnd\";\nimport { For, Show } from \"solid-js\";\nimport ContextItem from \"~/API/ContextItem\";\nimport { bookmarks, setBookmarks } from \"~/data/appState\";\nimport { bookmarksShown, setBookmarksShown } from \"~/data/appState\";\nexport default function Bookmarks() {\n  // We have to use any on this because solid-dnd doesn't have proper typings\n  const onDragEnd = ({\n    draggable,\n    droppable\n  }) => {\n    draggable.node.classList.remove(\"z-20\");\n    if (draggable && droppable) {\n      const currentItems = bookmarks();\n      const fromIndex = currentItems.findIndex(bookmark => bookmark.id === draggable.id);\n      const toIndex = currentItems.findIndex(bookmark => bookmark.id === droppable.id);\n      if (fromIndex !== toIndex) {\n        const updatedItems = currentItems.slice();\n        updatedItems.splice(toIndex, 0, ...updatedItems.splice(fromIndex, 1));\n        setBookmarks(updatedItems);\n      }\n    }\n  };\n\n  // We have to use any on this because solid-dnd doesn't have proper typings\n  const onDragStart = ({\n    draggable\n  }) => draggable.node.classList.add(\"z-20\");\n  return _$createComponent(Show, {\n    get when() {\n      return bookmarksShown();\n    },\n    get children() {\n      const _el$ = _tmpl$.cloneNode(true);\n      _el$.$$contextmenu = event => {\n        if (!event.data) event.data = [];\n        event.data.push(new ContextItem({\n          text: \"Hide bookmarks\",\n          onClick: () => {\n            setBookmarksShown(false);\n          }\n        }));\n      };\n      _$insert(_el$, _$createComponent(DragDropProvider, {\n        onDragEnd: onDragEnd,\n        onDragStart: onDragStart,\n        collisionDetector: closestCenter,\n        get children() {\n          return [_$createComponent(ConstrainDragAxis, {}), _$createComponent(DragDropSensors, {}), _$createComponent(SortableProvider, {\n            get ids() {\n              return bookmarks().map(x => x.id);\n            },\n            get children() {\n              return _$createComponent(For, {\n                get each() {\n                  return bookmarks();\n                },\n                children: bookmark => {\n                  const sortable = createSortable(bookmark.id);\n                  return _$createComponent(Bookmark, {\n                    sortable: sortable,\n                    bookmark: bookmark\n                  });\n                }\n              });\n            }\n          })];\n        }\n      }));\n      return _el$;\n    }\n  });\n}\n_$delegateEvents([\"contextmenu\"]);",
      "start": 1681131424027,
      "end": 1681131424044
    }
  ],
  "virtual": false
}