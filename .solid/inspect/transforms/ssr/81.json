{
  "id": "/workspaces/Velocity/src/manager/contextManager.ts",
  "deps": [],
  "plugins": [
    "vite:load-fallback",
    "vite:esbuild"
  ],
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import ContextItem from \"~/API/ContextItem\";\nimport Tab from \"~/API/Tab\";\nimport { open } from \"./clickManager\";\nimport { getActiveTab } from \"~/util/\";\n\nexport default function generateContextButtons(\n  element: HTMLElement\n): ContextItem[] {\n  const buttons: ContextItem[] = [];\n\n  if (isElementOfType(element, \"a\")) {\n    buttons.push(\n      new ContextItem({\n        text: \"Open link in new tab\",\n        onClick: () => {\n          open(undefined, getElementAttribute(element, \"href\"), true, false);\n        }\n      }),\n      new ContextItem({\n        text: \"Copy link address\",\n        onClick: () => {\n          navigator.clipboard.writeText(getElementAttribute(element, \"href\"));\n        }\n      }),\n      new ContextItem({ separator: true })\n    );\n  }\n\n  if (isElementOfType(element, \"img\")) {\n    buttons.push(\n      new ContextItem({\n        text: \"Open image in new tab\",\n        onClick: () => {\n          open(undefined, getElementAttribute(element, \"src\"), true, false);\n        }\n      }),\n      new ContextItem({\n        text: \"Copy image address\",\n        onClick: () => {\n          navigator.clipboard.writeText(getElementAttribute(element, \"src\"));\n        }\n      }),\n      new ContextItem({ separator: true })\n    );\n  }\n\n  const selection = getActiveTab()\n    .iframe.contentWindow?.getSelection()\n    ?.toString();\n  if (selection) {\n    buttons.push(\n      new ContextItem({\n        text: \"Copy\",\n        onClick: () => {\n          navigator.clipboard.writeText(selection);\n        }\n      }),\n      new ContextItem({ separator: true })\n    );\n  }\n\n  if (buttons.length === 0) {\n    buttons.push(\n      new ContextItem({\n        text: \"Back\",\n        onClick: () => {\n          getActiveTab().goBack();\n        }\n      }),\n      new ContextItem({\n        text: \"Forward\",\n        onClick: () => {\n          getActiveTab().goForward();\n        }\n      }),\n      new ContextItem({\n        text: \"Reload\",\n        onClick: () => {\n          getActiveTab().reload();\n        }\n      }),\n      new ContextItem({ separator: true })\n    );\n  }\n\n  buttons.push(\n    new ContextItem({\n      text: \"View Page Source\",\n      onClick: () => {\n        new Tab(\"view-source:\" + getActiveTab().url(), true);\n      }\n    }),\n    new ContextItem({\n      text: \"Inspect\",\n      onClick: () => {\n        getActiveTab().setDevTools(true);\n      }\n    })\n  );\n\n  return buttons;\n}\n\nfunction isElementOfType(element: HTMLElement, type: string): boolean {\n  if (element.tagName.toLowerCase() === type) {\n    return true;\n  } else if (element.parentElement) {\n    return isElementOfType(element.parentElement, type);\n  } else {\n    return false;\n  }\n}\n\nfunction getElementAttribute(element: any, attribute: string): string {\n  if (element[attribute]) {\n    return element[attribute];\n  } else if (element.parentElement) {\n    return getElementAttribute(element.parentElement, attribute);\n  } else {\n    return \"\";\n  }\n}\n",
      "start": 1681131432023,
      "end": 1681131432119
    },
    {
      "name": "vite:esbuild",
      "result": "import ContextItem from \"~/API/ContextItem\";\nimport Tab from \"~/API/Tab\";\nimport { open } from \"./clickManager\";\nimport { getActiveTab } from \"~/util/\";\nexport default function generateContextButtons(element) {\n  const buttons = [];\n  if (isElementOfType(element, \"a\")) {\n    buttons.push(\n      new ContextItem({\n        text: \"Open link in new tab\",\n        onClick: () => {\n          open(void 0, getElementAttribute(element, \"href\"), true, false);\n        }\n      }),\n      new ContextItem({\n        text: \"Copy link address\",\n        onClick: () => {\n          navigator.clipboard.writeText(getElementAttribute(element, \"href\"));\n        }\n      }),\n      new ContextItem({ separator: true })\n    );\n  }\n  if (isElementOfType(element, \"img\")) {\n    buttons.push(\n      new ContextItem({\n        text: \"Open image in new tab\",\n        onClick: () => {\n          open(void 0, getElementAttribute(element, \"src\"), true, false);\n        }\n      }),\n      new ContextItem({\n        text: \"Copy image address\",\n        onClick: () => {\n          navigator.clipboard.writeText(getElementAttribute(element, \"src\"));\n        }\n      }),\n      new ContextItem({ separator: true })\n    );\n  }\n  const selection = getActiveTab().iframe.contentWindow?.getSelection()?.toString();\n  if (selection) {\n    buttons.push(\n      new ContextItem({\n        text: \"Copy\",\n        onClick: () => {\n          navigator.clipboard.writeText(selection);\n        }\n      }),\n      new ContextItem({ separator: true })\n    );\n  }\n  if (buttons.length === 0) {\n    buttons.push(\n      new ContextItem({\n        text: \"Back\",\n        onClick: () => {\n          getActiveTab().goBack();\n        }\n      }),\n      new ContextItem({\n        text: \"Forward\",\n        onClick: () => {\n          getActiveTab().goForward();\n        }\n      }),\n      new ContextItem({\n        text: \"Reload\",\n        onClick: () => {\n          getActiveTab().reload();\n        }\n      }),\n      new ContextItem({ separator: true })\n    );\n  }\n  buttons.push(\n    new ContextItem({\n      text: \"View Page Source\",\n      onClick: () => {\n        new Tab(\"view-source:\" + getActiveTab().url(), true);\n      }\n    }),\n    new ContextItem({\n      text: \"Inspect\",\n      onClick: () => {\n        getActiveTab().setDevTools(true);\n      }\n    })\n  );\n  return buttons;\n}\nfunction isElementOfType(element, type) {\n  if (element.tagName.toLowerCase() === type) {\n    return true;\n  } else if (element.parentElement) {\n    return isElementOfType(element.parentElement, type);\n  } else {\n    return false;\n  }\n}\nfunction getElementAttribute(element, attribute) {\n  if (element[attribute]) {\n    return element[attribute];\n  } else if (element.parentElement) {\n    return getElementAttribute(element.parentElement, attribute);\n  } else {\n    return \"\";\n  }\n}\n",
      "start": 1681131432119,
      "end": 1681131432125
    }
  ],
  "virtual": false
}