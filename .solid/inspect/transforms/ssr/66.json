{
  "id": "/workspaces/Velocity/src/components/Tabs.tsx",
  "deps": [],
  "plugins": [
    "vite:load-fallback",
    "solid"
  ],
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import Tab from \"../API/Tab\";\nimport ConstrainDragAxis from \"./ConstrainDragAxis\";\nimport {\n  DragDropProvider,\n  DragDropSensors,\n  SortableProvider,\n  closestCenter,\n  createSortable\n} from \"@thisbeyond/solid-dnd\";\nimport { For, onMount } from \"solid-js\";\nimport type { JSX } from \"solid-js\";\nimport TabElement from \"~/components/Tab\";\nimport { setTabs, tabStack, tabs } from \"~/data/appState\";\nimport { preferences } from \"~/util/\";\n\nexport default function Header(): JSX.Element {\n  // We have to use any on this because solid-dnd doesn't have proper typings\n  const onDragEnd = ({ draggable, droppable }: any) => {\n    draggable.node.classList.remove(\"z-20\");\n    if (draggable && droppable) {\n      const currentItems = tabs();\n      const fromIndex = currentItems.findIndex(\n        (tab: Tab) => tab.id === draggable.id\n      );\n      const toIndex = currentItems.findIndex(\n        (tab: Tab) => tab.id === droppable.id\n      );\n      if (fromIndex !== toIndex) {\n        const updatedItems = currentItems.slice();\n        updatedItems.splice(toIndex, 0, ...updatedItems.splice(fromIndex, 1));\n        setTabs(updatedItems);\n      }\n    }\n  };\n\n  // We have to use any on this because solid-dnd doesn't have proper typings\n  const onDragStart = ({ draggable }: any) =>\n    draggable.node.classList.add(\"z-20\");\n\n  onMount(async () => {\n    await import(\"~/scripts/registerProtocols\");\n\n    const searchParams = new URLSearchParams(window.location.search);\n    const url = searchParams.get(\"url\");\n    const urls: string[] = JSON.parse(localStorage.getItem(\"tabs\") || \"[]\");\n\n    if (url) {\n      new Tab(url, true);\n      window.history.replaceState({}, document.title, \"/\");\n    } else if (\n      urls.length &&\n      preferences()[\"general.startup.openPreviousTabs\"]\n    ) {\n      const activeTab: number = parseInt(\n        localStorage.getItem(\"activeTab\") || \"0\"\n      );\n      urls.forEach((url: string): void => {\n        new Tab(url, false);\n      });\n      const focusTab = Array.from(tabStack())[activeTab];\n      if (focusTab) {\n        focusTab.focus = true;\n      }\n    } else {\n      new Tab(\"about:newTab\", true);\n    }\n  });\n\n  function makeTab() {\n    new Tab(\"about:newTab\", true);\n  }\n\n  return (\n    <div\n      class=\"flex\"\n      id=\"tabs\"\n      style=\"width: env(titlebar-area-width, 100%); min-height: env(titlebar-area-height, auto);margin-left: env(titlebar-area-x, 0);\"\n    >\n      <div class=\"flex w-full items-center h-11  px-[2px] cursor-default select-none gap-1\">\n        <DragDropProvider\n          onDragEnd={onDragEnd}\n          onDragStart={onDragStart}\n          collisionDetector={closestCenter}\n        >\n          <ConstrainDragAxis />\n          <DragDropSensors />\n          <SortableProvider ids={tabs().map((x) => x.id)}>\n            <For each={tabs()}>\n              {(tab: Tab): JSX.Element => {\n                const sortable = createSortable(tab.id);\n                return (\n                  // @ts-ignore\n                  // We have to ignore this because Typescript doesn't think this is valid syntax\n                  <TabElement sortable={sortable} tab={tab} />\n                );\n              }}\n            </For>\n          </SortableProvider>\n        </DragDropProvider>\n\n        <div class=\"flex items-center justify-center\" id=\"opentab\">\n          <div\n            class=\"toolbarbutton-1 h-9 w-9 rounded flex items-center justify-center\"\n            onClick={makeTab}\n          >\n            <i class=\"fa-regular fa-plus text-xs mt-[2px]\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "start": 1681131430951,
      "end": 1681131431171
    },
    {
      "name": "solid",
      "result": "import { ssr as _$ssr } from \"solid-js/web\";\nimport { escape as _$escape } from \"solid-js/web\";\nimport { createComponent as _$createComponent } from \"solid-js/web\";\nimport { ssrHydrationKey as _$ssrHydrationKey } from \"solid-js/web\";\nconst _tmpl$ = [\"<div\", \" class=\\\"flex\\\" id=\\\"tabs\\\" style=\\\"width: env(titlebar-area-width, 100%); min-height: env(titlebar-area-height, auto);margin-left: env(titlebar-area-x, 0);\\\"><div class=\\\"flex w-full items-center h-11  px-[2px] cursor-default select-none gap-1\\\"><!--#-->\", \"<!--/--><div class=\\\"flex items-center justify-center\\\" id=\\\"opentab\\\"><div class=\\\"toolbarbutton-1 h-9 w-9 rounded flex items-center justify-center\\\"><i class=\\\"fa-regular fa-plus text-xs mt-[2px]\\\"></i></div></div></div></div>\"];\nimport Tab from \"../API/Tab\";\nimport ConstrainDragAxis from \"./ConstrainDragAxis\";\nimport { DragDropProvider, DragDropSensors, SortableProvider, closestCenter, createSortable } from \"@thisbeyond/solid-dnd\";\nimport { For, onMount } from \"solid-js\";\nimport TabElement from \"~/components/Tab\";\nimport { setTabs, tabStack, tabs } from \"~/data/appState\";\nimport { preferences } from \"~/util/\";\nexport default function Header() {\n  // We have to use any on this because solid-dnd doesn't have proper typings\n  const onDragEnd = ({\n    draggable,\n    droppable\n  }) => {\n    draggable.node.classList.remove(\"z-20\");\n    if (draggable && droppable) {\n      const currentItems = tabs();\n      const fromIndex = currentItems.findIndex(tab => tab.id === draggable.id);\n      const toIndex = currentItems.findIndex(tab => tab.id === droppable.id);\n      if (fromIndex !== toIndex) {\n        const updatedItems = currentItems.slice();\n        updatedItems.splice(toIndex, 0, ...updatedItems.splice(fromIndex, 1));\n        setTabs(updatedItems);\n      }\n    }\n  };\n\n  // We have to use any on this because solid-dnd doesn't have proper typings\n  const onDragStart = ({\n    draggable\n  }) => draggable.node.classList.add(\"z-20\");\n  onMount(async () => {\n    await import(\"~/scripts/registerProtocols\");\n    const searchParams = new URLSearchParams(window.location.search);\n    const url = searchParams.get(\"url\");\n    const urls = JSON.parse(localStorage.getItem(\"tabs\") || \"[]\");\n    if (url) {\n      new Tab(url, true);\n      window.history.replaceState({}, document.title, \"/\");\n    } else if (urls.length && preferences()[\"general.startup.openPreviousTabs\"]) {\n      const activeTab = parseInt(localStorage.getItem(\"activeTab\") || \"0\");\n      urls.forEach(url => {\n        new Tab(url, false);\n      });\n      const focusTab = Array.from(tabStack())[activeTab];\n      if (focusTab) {\n        focusTab.focus = true;\n      }\n    } else {\n      new Tab(\"about:newTab\", true);\n    }\n  });\n  function makeTab() {\n    new Tab(\"about:newTab\", true);\n  }\n  return _$ssr(_tmpl$, _$ssrHydrationKey(), _$escape(_$createComponent(DragDropProvider, {\n    onDragEnd: onDragEnd,\n    onDragStart: onDragStart,\n    collisionDetector: closestCenter,\n    get children() {\n      return [_$createComponent(ConstrainDragAxis, {}), _$createComponent(DragDropSensors, {}), _$createComponent(SortableProvider, {\n        get ids() {\n          return tabs().map(x => x.id);\n        },\n        get children() {\n          return _$createComponent(For, {\n            get each() {\n              return tabs();\n            },\n            children: tab => {\n              const sortable = createSortable(tab.id);\n              return (// @ts-ignore\n                // We have to ignore this because Typescript doesn't think this is valid syntax\n                _$createComponent(TabElement, {\n                  sortable: sortable,\n                  tab: tab\n                })\n              );\n            }\n          });\n        }\n      })];\n    }\n  })));\n}",
      "start": 1681131431171,
      "end": 1681131431189
    }
  ],
  "virtual": false
}