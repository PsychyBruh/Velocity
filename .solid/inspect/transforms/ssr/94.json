{
  "id": "/workspaces/Velocity/src/scripts/addonStoreModifier.ts",
  "deps": [],
  "plugins": [
    "vite:load-fallback",
    "vite:esbuild"
  ],
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import AddonReader from \"~/API/AddonReader\";\nimport RuntimeModifier from \"~/API/RuntimeModifier\";\nimport { addons } from \"~/data/appState\";\nimport { install, uninstall } from \"~/manager/addonManager\";\n\nconst addonStoreModifier = new RuntimeModifier(\"addonstore\");\n\nclass AddonEvent extends Event {\n  id: string;\n\n  constructor(type: string, id: string) {\n    super(type);\n    this.id = id;\n  }\n}\n\nclass AddonManager extends EventTarget {\n  abuseReportPanelEnabled = false as const;\n\n  constructor() {\n    super();\n  }\n\n  async createInstall(data: { url: string; hash: string }) {\n    const manager: AddonManager = this;\n    const event = new (class extends EventTarget {\n      async install() {\n        const reader = new AddonReader(data.url);\n        this.dispatchEvent(new Event(\"onDownloadStarted\"));\n        reader.ready\n          .then(async () => {\n            this.dispatchEvent(new Event(\"onDownloadEnded\"));\n            this.dispatchEvent(new Event(\"onInstallStarted\"));\n            install(reader, data.url)\n              .then((id: string) => {\n                this.dispatchEvent(new Event(\"onInstallEnded\"));\n                manager.dispatchEvent(new AddonEvent(\"onInstalled\", id));\n              })\n              .catch(() => {\n                this.dispatchEvent(new Event(\"onInstallCancelled\"));\n              });\n          })\n          .catch(() => {\n            this.dispatchEvent(new Event(\"onDownloadFailed\"));\n          });\n      }\n    })();\n    return event;\n  }\n\n  async getAddonByID(id: string) {\n    const addon = addons().find((x) => x.id === id);\n    return addon\n      ? Object.assign(\n          {\n            uninstall: () => {\n              this.dispatchEvent(new AddonEvent(\"onUninstalling\", id));\n              uninstall(addon)\n                .then(() => {\n                  this.dispatchEvent(new AddonEvent(\"onUninstalled\", id));\n                })\n                .catch(() => {});\n            },\n            setEnabled: (state: boolean) => {\n              if (state) {\n                this.dispatchEvent(new AddonEvent(\"onEnabling\", id));\n                setTimeout(() => {\n                  this.dispatchEvent(new AddonEvent(\"onEnabled\", id));\n                }, 1000);\n              } else {\n                this.dispatchEvent(new AddonEvent(\"onDisabling\", id));\n                setTimeout(() => {\n                  this.dispatchEvent(new AddonEvent(\"onDisabled\", id));\n                }, 1000);\n              }\n            }\n          },\n          addon\n        )\n      : undefined;\n  }\n\n  reportAbuse() {}\n}\n\naddonStoreModifier.createInject(\"*://addons.mozilla.org/*\", ({ navigator }) => {\n  const addonManager = new AddonManager();\n\n  Object.defineProperty(navigator, \"mozAddonManager\", {\n    get() {\n      return addonManager;\n    }\n  });\n});\n",
      "start": 1681131431000,
      "end": 1681131431226
    },
    {
      "name": "vite:esbuild",
      "result": "import AddonReader from \"~/API/AddonReader\";\nimport RuntimeModifier from \"~/API/RuntimeModifier\";\nimport { addons } from \"~/data/appState\";\nimport { install, uninstall } from \"~/manager/addonManager\";\nconst addonStoreModifier = new RuntimeModifier(\"addonstore\");\nclass AddonEvent extends Event {\n  id;\n  constructor(type, id) {\n    super(type);\n    this.id = id;\n  }\n}\nclass AddonManager extends EventTarget {\n  abuseReportPanelEnabled = false;\n  constructor() {\n    super();\n  }\n  async createInstall(data) {\n    const manager = this;\n    const event = new class extends EventTarget {\n      async install() {\n        const reader = new AddonReader(data.url);\n        this.dispatchEvent(new Event(\"onDownloadStarted\"));\n        reader.ready.then(async () => {\n          this.dispatchEvent(new Event(\"onDownloadEnded\"));\n          this.dispatchEvent(new Event(\"onInstallStarted\"));\n          install(reader, data.url).then((id) => {\n            this.dispatchEvent(new Event(\"onInstallEnded\"));\n            manager.dispatchEvent(new AddonEvent(\"onInstalled\", id));\n          }).catch(() => {\n            this.dispatchEvent(new Event(\"onInstallCancelled\"));\n          });\n        }).catch(() => {\n          this.dispatchEvent(new Event(\"onDownloadFailed\"));\n        });\n      }\n    }();\n    return event;\n  }\n  async getAddonByID(id) {\n    const addon = addons().find((x) => x.id === id);\n    return addon ? Object.assign(\n      {\n        uninstall: () => {\n          this.dispatchEvent(new AddonEvent(\"onUninstalling\", id));\n          uninstall(addon).then(() => {\n            this.dispatchEvent(new AddonEvent(\"onUninstalled\", id));\n          }).catch(() => {\n          });\n        },\n        setEnabled: (state) => {\n          if (state) {\n            this.dispatchEvent(new AddonEvent(\"onEnabling\", id));\n            setTimeout(() => {\n              this.dispatchEvent(new AddonEvent(\"onEnabled\", id));\n            }, 1e3);\n          } else {\n            this.dispatchEvent(new AddonEvent(\"onDisabling\", id));\n            setTimeout(() => {\n              this.dispatchEvent(new AddonEvent(\"onDisabled\", id));\n            }, 1e3);\n          }\n        }\n      },\n      addon\n    ) : void 0;\n  }\n  reportAbuse() {\n  }\n}\naddonStoreModifier.createInject(\"*://addons.mozilla.org/*\", ({ navigator }) => {\n  const addonManager = new AddonManager();\n  Object.defineProperty(navigator, \"mozAddonManager\", {\n    get() {\n      return addonManager;\n    }\n  });\n});\n",
      "start": 1681131431226,
      "end": 1681131431300
    }
  ],
  "virtual": false
}