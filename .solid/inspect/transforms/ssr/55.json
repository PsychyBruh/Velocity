{
  "id": "/workspaces/Velocity/src/API/Tab.ts",
  "deps": [],
  "plugins": [
    "vite:load-fallback",
    "vite:esbuild"
  ],
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import Bookmark from \"./Bookmark\";\nimport EventEmitter from \"events\";\nimport { createSignal } from \"solid-js\";\nimport type { Accessor, Setter } from \"solid-js\";\nimport { setTabStack, setTabs, tabStack, tabs } from \"~/data/appState\";\nimport * as contentScriptManager from \"~/manager/contentScriptManager\";\nimport * as tabManager from \"~/manager/tabManager\";\nimport { getActiveTab } from \"~/util\";\nimport * as urlUtil from \"~/util/url\";\n\ninterface ProxyWindow extends Window {\n  __uv$location: Location;\n}\n\nexport default class Tab extends EventEmitter {\n  iframe: HTMLIFrameElement = document.createElement(\"iframe\");\n  id: number = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n  historyId: number = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n  #pinned: [Accessor<boolean>, Setter<boolean>] = createSignal<boolean>(false);\n  #small: [Accessor<boolean>, Setter<boolean>] = createSignal<boolean>(false);\n  #title: [Accessor<string>, Setter<string>] = createSignal<string>(\"\");\n  #url: [Accessor<string>, Setter<string>] = createSignal<string>(\"\");\n  #search: [Accessor<string | boolean>, Setter<string | boolean>] =\n    createSignal<string | boolean>(false);\n  #icon: [Accessor<string>, Setter<string>] = createSignal<string>(\"\");\n  #focus: [Accessor<boolean>, Setter<boolean>] = createSignal<boolean>(false);\n  #loading: [Accessor<boolean>, Setter<boolean>] = createSignal<boolean>(true);\n  #playing: [Accessor<boolean>, Setter<boolean>] = createSignal<boolean>(false);\n  scrollPos: number = 0;\n\n  constructor(url?: string, isActive?: boolean) {\n    super();\n    contentScriptManager.subscribe(this);\n    // initialize iframe\n    this.iframe.classList.add(\"w-full\", \"h-full\", \"border-0\");\n    if (!isActive) this.iframe.classList.add(\"hidden\");\n    document\n      .querySelector<HTMLDivElement>(\"#content\")\n      ?.appendChild(this.iframe);\n    tabManager.register(this);\n    this.navigate(url || \"about:newTab\");\n    requestAnimationFrame(this.#updateDetails.bind(this));\n\n    // Add tab to stack\n    setTabs([...tabs(), this]);\n    if (isActive) {\n      this.focus = true;\n      setTabStack(new Set([this, ...tabStack()]));\n    } else {\n      setTabStack(new Set([...tabStack(), this]));\n    }\n  }\n\n  goBack() {\n    this.iframe.contentWindow?.history.back();\n  }\n\n  goForward() {\n    this.iframe.contentWindow?.history.forward();\n  }\n\n  pin() {}\n\n  reload() {\n    this.navigate(this.url() || \"about:newTab\");\n  }\n\n  stop() {\n    this.loading = false;\n    this.iframe.contentWindow?.stop();\n  }\n\n  navigate(query: string) {\n    let url = urlUtil.generateProxyUrl(query);\n\n    this.iframe.onload = () => {\n      this.loading = false;\n    };\n\n    this.iframe.src = url;\n\n    this.updateStorage();\n  }\n\n  close(event?: MouseEvent): void {\n    if (event) {\n      event.stopPropagation();\n    }\n    if (tabs().length === 1) {\n      new Tab(\"about:newTab\", true);\n    }\n    this.#cleanup();\n    setTabStack(new Set(Array.from(tabStack()).filter((tab) => tab !== this)));\n    setTabs(tabs().filter((tab) => tab !== this));\n    getActiveTab().focus = true;\n    this.updateStorage();\n  }\n\n  bookmark() {\n    new Bookmark({\n      name: this.#title[0](),\n      url: this.#url[0](),\n      icon: this.#icon[0]()\n    });\n  }\n\n  executeScript(script: string): any {\n    return this.iframe.contentWindow?.window.eval(script);\n  }\n\n  addStyle(style: string): void {\n    const element = this.iframe.contentDocument!.createElement(\"style\");\n    element.innerText = style;\n    this.iframe.contentDocument?.head.appendChild(element);\n  }\n\n  setDevTools(state?: boolean) {\n    const iframeWindow = this.iframe.contentWindow as Window & { eruda: any };\n    if (!iframeWindow.eruda) {\n      const script = document.createElement(\"script\");\n      script.src = \"https://cdn.jsdelivr.net/npm/eruda\";\n      script.onload = () => {\n        this.setDevTools(state);\n      };\n      this.iframe.contentDocument?.body.appendChild(script);\n      return;\n    }\n\n    if (!iframeWindow.eruda._isInit) iframeWindow.eruda.init();\n\n    const btnBk = iframeWindow.eruda._entryBtn._$el[0].cloneNode(true);\n    btnBk.style.display = \"none\";\n    iframeWindow.eruda._entryBtn._$el[0].parentElement.replaceChild(\n      btnBk,\n      iframeWindow.eruda._entryBtn._$el[0]\n    );\n    btnBk.onclick = () => {\n      btnBk.style.display = \"none\";\n      iframeWindow.eruda.hide();\n    };\n    iframeWindow.eruda._entryBtn._$el[0] = btnBk;\n\n    if (state) {\n      btnBk.style.display = \"flex\";\n      iframeWindow.eruda.show();\n    } else {\n      if (\n        state !== undefined ||\n        iframeWindow.eruda._shadowRoot.querySelector(\".eruda-dev-tools\").style\n          .display !== \"none\"\n      ) {\n        btnBk.style.display = \"none\";\n        iframeWindow.eruda.hide();\n      } else {\n        btnBk.style.display = \"flex\";\n        iframeWindow.eruda.show();\n      }\n    }\n  }\n\n  #cleanup() {\n    document\n      .querySelector<HTMLDivElement>(\"#content\")\n      ?.removeChild(this.iframe);\n  }\n\n  updateStorage() {\n    localStorage.setItem(\n      \"tabs\",\n      JSON.stringify(Array.from(tabs()).map((x) => x.url()))\n    );\n  }\n\n  #updateDetails(): void {\n    if (!this.iframe.contentWindow || !this.iframe.contentDocument) {\n      setTimeout(this.#updateDetails.bind(this), 100);\n      return;\n    }\n    this.#url[1](\n      urlUtil.normalize(\n        (this.iframe.contentWindow as ProxyWindow)?.__uv$location?.toString() ||\n          this.iframe.src\n      )\n    );\n\n    this.title = this.iframe.contentDocument?.title || this.#url[0]();\n\n    if (this.iframe.contentDocument.head) {\n      const icons =\n        this.iframe.contentDocument.head.querySelectorAll<HTMLLinkElement>(\n          \"link[rel='favicon'], link[rel='shortcut icon'], link[rel='icon']\"\n        );\n      let ico;\n      try {\n        ico = new URL(\"/favicon.ico\", this.url()).toString();\n      } catch {}\n      for (let i = icons.length - 1; i >= 0; i--) {\n        if (Array.from(icons)?.at(i)?.href) {\n          ico = Array.from(icons).at(i)?.href;\n          break;\n        }\n      }\n\n      if (ico && /^data:/.test(ico)) {\n        this.icon = ico;\n      } else if (ico) {\n        this.icon = ico;\n      }\n    }\n\n    const media: (HTMLAudioElement | HTMLVideoElement)[] = Array.from(\n      this.iframe.contentDocument?.querySelectorAll<\n        HTMLAudioElement | HTMLVideoElement\n      >(\"audio, video\") ?? []\n    );\n    this.playing = media.some((x) => !x.paused && !x.muted);\n\n    setTimeout(this.#updateDetails.bind(this), 100);\n  }\n\n  get url(): Accessor<string> {\n    return this.#url[0];\n  }\n\n  set focus(value: boolean | Accessor<boolean>) {\n    /*\n      We also need to store the scroll position for each iframe because when they get hidden and then\n      un-hidden the scroll position gets reset, this seems to be a bug with browsers and not a result\n      of the code here.\n    */\n    if (value) {\n      tabs().forEach((tab) => {\n        tab.focus = false;\n        tab.iframe.classList.add(\"hidden\");\n      });\n      setTabStack(new Set([this, ...tabStack()]));\n      this.iframe.classList.remove(\"hidden\");\n      (\n        this.iframe.contentDocument || ({ documentElement: {} } as Document)\n      ).documentElement.scrollTop = this.scrollPos;\n      localStorage.setItem(\n        \"activeTab\",\n        tabs()\n          .findIndex((x) => x.id === this.id)\n          .toString()\n      );\n    }\n    this.#focus[1](value);\n  }\n\n  get focus(): Accessor<boolean> {\n    return this.#focus[0];\n  }\n\n  get search(): Accessor<string | boolean> {\n    return this.#search[0];\n  }\n\n  set search(value: string | boolean | Accessor<string | boolean>) {\n    this.#search[1](value);\n  }\n\n  get pinned(): Accessor<boolean> {\n    return this.#pinned[0];\n  }\n\n  set pinned(value: boolean | Accessor<boolean>) {\n    this.#pinned[1](value);\n  }\n\n  get title(): Accessor<string> {\n    return this.#title[0];\n  }\n\n  set title(title: string | Accessor<string>) {\n    this.#title[1](title);\n  }\n\n  get icon(): Accessor<string> {\n    return this.#icon[0];\n  }\n\n  set icon(icon: string | Accessor<string>) {\n    this.#icon[1](icon);\n  }\n\n  get loading(): Accessor<boolean> {\n    return this.#loading[0];\n  }\n\n  set loading(value: boolean | Accessor<boolean>) {\n    this.#loading[1](value);\n  }\n\n  get playing(): Accessor<boolean> {\n    return this.#playing[0];\n  }\n\n  set playing(value: boolean | Accessor<boolean>) {\n    this.#playing[1](value);\n  }\n\n  get small(): Accessor<boolean> {\n    return this.#small[0];\n  }\n}\n",
      "start": 1681131431241,
      "end": 1681131431589
    },
    {
      "name": "vite:esbuild",
      "result": "import Bookmark from \"./Bookmark\";\nimport EventEmitter from \"events\";\nimport { createSignal } from \"solid-js\";\nimport { setTabStack, setTabs, tabStack, tabs } from \"~/data/appState\";\nimport * as contentScriptManager from \"~/manager/contentScriptManager\";\nimport * as tabManager from \"~/manager/tabManager\";\nimport { getActiveTab } from \"~/util\";\nimport * as urlUtil from \"~/util/url\";\nexport default class Tab extends EventEmitter {\n  iframe = document.createElement(\"iframe\");\n  id = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n  historyId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n  #pinned = createSignal(false);\n  #small = createSignal(false);\n  #title = createSignal(\"\");\n  #url = createSignal(\"\");\n  #search = createSignal(false);\n  #icon = createSignal(\"\");\n  #focus = createSignal(false);\n  #loading = createSignal(true);\n  #playing = createSignal(false);\n  scrollPos = 0;\n  constructor(url, isActive) {\n    super();\n    contentScriptManager.subscribe(this);\n    this.iframe.classList.add(\"w-full\", \"h-full\", \"border-0\");\n    if (!isActive)\n      this.iframe.classList.add(\"hidden\");\n    document.querySelector(\"#content\")?.appendChild(this.iframe);\n    tabManager.register(this);\n    this.navigate(url || \"about:newTab\");\n    requestAnimationFrame(this.#updateDetails.bind(this));\n    setTabs([...tabs(), this]);\n    if (isActive) {\n      this.focus = true;\n      setTabStack(/* @__PURE__ */ new Set([this, ...tabStack()]));\n    } else {\n      setTabStack(/* @__PURE__ */ new Set([...tabStack(), this]));\n    }\n  }\n  goBack() {\n    this.iframe.contentWindow?.history.back();\n  }\n  goForward() {\n    this.iframe.contentWindow?.history.forward();\n  }\n  pin() {\n  }\n  reload() {\n    this.navigate(this.url() || \"about:newTab\");\n  }\n  stop() {\n    this.loading = false;\n    this.iframe.contentWindow?.stop();\n  }\n  navigate(query) {\n    let url = urlUtil.generateProxyUrl(query);\n    this.iframe.onload = () => {\n      this.loading = false;\n    };\n    this.iframe.src = url;\n    this.updateStorage();\n  }\n  close(event) {\n    if (event) {\n      event.stopPropagation();\n    }\n    if (tabs().length === 1) {\n      new Tab(\"about:newTab\", true);\n    }\n    this.#cleanup();\n    setTabStack(new Set(Array.from(tabStack()).filter((tab) => tab !== this)));\n    setTabs(tabs().filter((tab) => tab !== this));\n    getActiveTab().focus = true;\n    this.updateStorage();\n  }\n  bookmark() {\n    new Bookmark({\n      name: this.#title[0](),\n      url: this.#url[0](),\n      icon: this.#icon[0]()\n    });\n  }\n  executeScript(script) {\n    return this.iframe.contentWindow?.window.eval(script);\n  }\n  addStyle(style) {\n    const element = this.iframe.contentDocument.createElement(\"style\");\n    element.innerText = style;\n    this.iframe.contentDocument?.head.appendChild(element);\n  }\n  setDevTools(state) {\n    const iframeWindow = this.iframe.contentWindow;\n    if (!iframeWindow.eruda) {\n      const script = document.createElement(\"script\");\n      script.src = \"https://cdn.jsdelivr.net/npm/eruda\";\n      script.onload = () => {\n        this.setDevTools(state);\n      };\n      this.iframe.contentDocument?.body.appendChild(script);\n      return;\n    }\n    if (!iframeWindow.eruda._isInit)\n      iframeWindow.eruda.init();\n    const btnBk = iframeWindow.eruda._entryBtn._$el[0].cloneNode(true);\n    btnBk.style.display = \"none\";\n    iframeWindow.eruda._entryBtn._$el[0].parentElement.replaceChild(\n      btnBk,\n      iframeWindow.eruda._entryBtn._$el[0]\n    );\n    btnBk.onclick = () => {\n      btnBk.style.display = \"none\";\n      iframeWindow.eruda.hide();\n    };\n    iframeWindow.eruda._entryBtn._$el[0] = btnBk;\n    if (state) {\n      btnBk.style.display = \"flex\";\n      iframeWindow.eruda.show();\n    } else {\n      if (state !== void 0 || iframeWindow.eruda._shadowRoot.querySelector(\".eruda-dev-tools\").style.display !== \"none\") {\n        btnBk.style.display = \"none\";\n        iframeWindow.eruda.hide();\n      } else {\n        btnBk.style.display = \"flex\";\n        iframeWindow.eruda.show();\n      }\n    }\n  }\n  #cleanup() {\n    document.querySelector(\"#content\")?.removeChild(this.iframe);\n  }\n  updateStorage() {\n    localStorage.setItem(\n      \"tabs\",\n      JSON.stringify(Array.from(tabs()).map((x) => x.url()))\n    );\n  }\n  #updateDetails() {\n    if (!this.iframe.contentWindow || !this.iframe.contentDocument) {\n      setTimeout(this.#updateDetails.bind(this), 100);\n      return;\n    }\n    this.#url[1](\n      urlUtil.normalize(\n        this.iframe.contentWindow?.__uv$location?.toString() || this.iframe.src\n      )\n    );\n    this.title = this.iframe.contentDocument?.title || this.#url[0]();\n    if (this.iframe.contentDocument.head) {\n      const icons = this.iframe.contentDocument.head.querySelectorAll(\n        \"link[rel='favicon'], link[rel='shortcut icon'], link[rel='icon']\"\n      );\n      let ico;\n      try {\n        ico = new URL(\"/favicon.ico\", this.url()).toString();\n      } catch {\n      }\n      for (let i = icons.length - 1; i >= 0; i--) {\n        if (Array.from(icons)?.at(i)?.href) {\n          ico = Array.from(icons).at(i)?.href;\n          break;\n        }\n      }\n      if (ico && /^data:/.test(ico)) {\n        this.icon = ico;\n      } else if (ico) {\n        this.icon = ico;\n      }\n    }\n    const media = Array.from(\n      this.iframe.contentDocument?.querySelectorAll(\"audio, video\") ?? []\n    );\n    this.playing = media.some((x) => !x.paused && !x.muted);\n    setTimeout(this.#updateDetails.bind(this), 100);\n  }\n  get url() {\n    return this.#url[0];\n  }\n  set focus(value) {\n    if (value) {\n      tabs().forEach((tab) => {\n        tab.focus = false;\n        tab.iframe.classList.add(\"hidden\");\n      });\n      setTabStack(/* @__PURE__ */ new Set([this, ...tabStack()]));\n      this.iframe.classList.remove(\"hidden\");\n      (this.iframe.contentDocument || { documentElement: {} }).documentElement.scrollTop = this.scrollPos;\n      localStorage.setItem(\n        \"activeTab\",\n        tabs().findIndex((x) => x.id === this.id).toString()\n      );\n    }\n    this.#focus[1](value);\n  }\n  get focus() {\n    return this.#focus[0];\n  }\n  get search() {\n    return this.#search[0];\n  }\n  set search(value) {\n    this.#search[1](value);\n  }\n  get pinned() {\n    return this.#pinned[0];\n  }\n  set pinned(value) {\n    this.#pinned[1](value);\n  }\n  get title() {\n    return this.#title[0];\n  }\n  set title(title) {\n    this.#title[1](title);\n  }\n  get icon() {\n    return this.#icon[0];\n  }\n  set icon(icon) {\n    this.#icon[1](icon);\n  }\n  get loading() {\n    return this.#loading[0];\n  }\n  set loading(value) {\n    this.#loading[1](value);\n  }\n  get playing() {\n    return this.#playing[0];\n  }\n  set playing(value) {\n    this.#playing[1](value);\n  }\n  get small() {\n    return this.#small[0];\n  }\n}\n",
      "start": 1681131431589,
      "end": 1681131431746
    }
  ],
  "virtual": false
}