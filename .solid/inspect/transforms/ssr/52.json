{
  "id": "/workspaces/Velocity/src/API/Keybind.ts",
  "deps": [],
  "plugins": [
    "vite:load-fallback",
    "vite:esbuild"
  ],
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { IDBPDatabase, openDB } from \"idb\";\nimport { keybinds, setKeybinds } from \"~/data/appState\";\n\ninterface KeybindOptions {\n  id?: number;\n  name: string;\n  description: string;\n  key: string;\n  ctrl?: boolean;\n  shift?: boolean;\n  alt?: boolean;\n  meta?: boolean;\n  callback: (event: KeyboardEvent) => void;\n}\n\nexport default class Keybind {\n  id: number = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n  name!: string;\n  description!: string;\n  key!: string;\n  shift!: boolean;\n  ctrl!: boolean;\n  alt!: boolean;\n  meta!: boolean;\n  callback!: (event: KeyboardEvent) => void;\n\n  constructor(options: KeybindOptions) {\n    if (\n      typeof options.id === \"undefined\" ||\n      (typeof options.id !== \"undefined\" &&\n        !keybinds().find((x) => x.id === options.id))\n    ) {\n      this.id =\n        options.id ?? Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n      this.name = options.name;\n      this.description = options.description;\n      this.key = options.key;\n      this.shift = options.shift ?? false;\n      this.ctrl = options.ctrl ?? false;\n      this.alt = options.alt ?? false;\n      this.meta = options.meta ?? false;\n      this.callback = options.callback;\n\n      this.#init(this);\n\n      setKeybinds([...keybinds(), this]);\n    } else {\n      setKeybinds(\n        keybinds().map((keybind: Keybind) => {\n          if (keybind.id === options.id) {\n            keybind.name = options.name ?? keybind.name;\n            keybind.description = options.description ?? keybind.description;\n            keybind.key = options.key ?? keybind.key;\n            keybind.shift = options.shift ?? keybind.shift;\n            keybind.ctrl = options.ctrl ?? keybind.ctrl;\n            keybind.alt = options.alt ?? keybind.alt;\n            keybind.meta = options.meta ?? keybind.meta;\n            keybind.callback = options.callback || keybind.callback;\n            this.#init(keybind);\n          }\n          return keybind;\n        })\n      );\n\n      return keybinds().find(\n        (keybind: Keybind) => keybind.id === options.id\n      ) as Keybind;\n    }\n  }\n\n  async #init(keybind: Keybind) {\n    const db: IDBPDatabase = await openDB(\"keybinds\", 1, {\n      upgrade(db) {\n        db.createObjectStore(\"keybinds\", {\n          keyPath: \"id\"\n        });\n      }\n    });\n\n    const tx = db.transaction(\"keybinds\", \"readwrite\");\n    const store = tx.objectStore(\"keybinds\");\n\n    return await store.put(\n      Object.assign({}, keybind, {\n        callback: undefined\n      })\n    );\n  }\n\n  toString() {\n    let str = \"\";\n    if (this.ctrl) str += \"Ctrl + \";\n    if (this.alt) str += \"Alt + \";\n    if (this.meta) str += \"Meta + \";\n    if (this.shift) str += \"Shift + \";\n    str += this.key.charAt(0).toUpperCase() + this.key.slice(1);\n    return str;\n  }\n}\n",
      "start": 1681131431354,
      "end": 1681131431770
    },
    {
      "name": "vite:esbuild",
      "result": "import { openDB } from \"idb\";\nimport { keybinds, setKeybinds } from \"~/data/appState\";\nexport default class Keybind {\n  id = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n  name;\n  description;\n  key;\n  shift;\n  ctrl;\n  alt;\n  meta;\n  callback;\n  constructor(options) {\n    if (typeof options.id === \"undefined\" || typeof options.id !== \"undefined\" && !keybinds().find((x) => x.id === options.id)) {\n      this.id = options.id ?? Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n      this.name = options.name;\n      this.description = options.description;\n      this.key = options.key;\n      this.shift = options.shift ?? false;\n      this.ctrl = options.ctrl ?? false;\n      this.alt = options.alt ?? false;\n      this.meta = options.meta ?? false;\n      this.callback = options.callback;\n      this.#init(this);\n      setKeybinds([...keybinds(), this]);\n    } else {\n      setKeybinds(\n        keybinds().map((keybind) => {\n          if (keybind.id === options.id) {\n            keybind.name = options.name ?? keybind.name;\n            keybind.description = options.description ?? keybind.description;\n            keybind.key = options.key ?? keybind.key;\n            keybind.shift = options.shift ?? keybind.shift;\n            keybind.ctrl = options.ctrl ?? keybind.ctrl;\n            keybind.alt = options.alt ?? keybind.alt;\n            keybind.meta = options.meta ?? keybind.meta;\n            keybind.callback = options.callback || keybind.callback;\n            this.#init(keybind);\n          }\n          return keybind;\n        })\n      );\n      return keybinds().find(\n        (keybind) => keybind.id === options.id\n      );\n    }\n  }\n  async #init(keybind) {\n    const db = await openDB(\"keybinds\", 1, {\n      upgrade(db2) {\n        db2.createObjectStore(\"keybinds\", {\n          keyPath: \"id\"\n        });\n      }\n    });\n    const tx = db.transaction(\"keybinds\", \"readwrite\");\n    const store = tx.objectStore(\"keybinds\");\n    return await store.put(\n      Object.assign({}, keybind, {\n        callback: void 0\n      })\n    );\n  }\n  toString() {\n    let str = \"\";\n    if (this.ctrl)\n      str += \"Ctrl + \";\n    if (this.alt)\n      str += \"Alt + \";\n    if (this.meta)\n      str += \"Meta + \";\n    if (this.shift)\n      str += \"Shift + \";\n    str += this.key.charAt(0).toUpperCase() + this.key.slice(1);\n    return str;\n  }\n}\n",
      "start": 1681131431771,
      "end": 1681131431933
    }
  ],
  "virtual": false
}